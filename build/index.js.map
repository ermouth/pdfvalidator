{"version":3,"sources":["../src/index.js"],"names":["pkijs","asn1js","pdfjs","extractTSToken","cmsSignedSimp","signerInfos","tsattr","unsignedAttrs","attributes","forEach","attr","type","tstoken","asn1","fromBER","values","valueBeforeDecode","ContentInfo","schema","result","ex","verifyCMSHash","signedDataBuffer","Promise","resolve","hashAlgo","getAlgorithmByOID","digestAlgorithm","algorithmId","then","crypto","getCrypto","digest","name","Uint8Array","messageDigest","ArrayBuffer","signedAttrs","j","length","valueBlock","valueHex","byteLength","view1","view2","i","verifyChain","certificate","chain","trustedCAs","certificateChainEngine","CertificateChainValidationEngine","certs","trustedCerts","filter","cert","push","verify","PDFInfo","isValid","isSigned","sigVerified","hashVerified","hashAlgorithm","signerVerified","hasTS","tsVerified","tsCertVerified","tsCert","signingTruststore","timestampingTruststore","verified","signer","status","PDFValidator","buffer","trustedSigningCAs","trustedTimestampingCAs","pdfInfo","bufferView","pdf","PDFJS","PDFDocument","parseStartXRef","parse","acroForm","xref","root","get","fields","isRef","sigField","fetch","sigFieldType","v","byteRange","contents","contentLength","contentBuffer","contentView","charCodeAt","cmsContentSimp","SignedData","content","signedDataView","count","truststore","idx","splice","sequence","data","checkChain","extendedMode","signatureVerified","signerCertificate","certificates","tsToken","tsSigned","signature"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * PDF Validator module\n *\n * By Fotis Loukos <me@fotisl.com>\n * @module pdfvalidator\n */\nimport * as pkijs from 'pkijs';\nimport * as asn1js from 'asn1js';\nimport * as pdfjs from './pdf.js';\nimport './webcrypto';\n\n/**\n  * A trust store.\n  * @typedef {Object} TrustStore\n  * @property {string} name - The name of the trust store.\n  * @property {Array<pkijs.Certificate>} certificates - All the certificates\n  * contained in the trust store.\n  */\n\n/**\n * Trust store verification status.\n * @typedef {Object} TrustStoreStatus\n * @property {string} name - The name of the trust store.\n * @property {boolean} status - True if the certificate chains to this trust\n * store, false otherwise.\n */\n\n/**\n * Extract the timestamp token from the unsigned attributes of the CMS\n * signed data.\n * @param {pkijs.SignedData} cmsSignedSimp - The CMS signed data.\n * @return {pkijs.ContentInfo} The timestamp token as a pkijs.ContentInfo\n * object or null if no timestamp is present.\n */\nfunction extractTSToken(cmsSignedSimp) {\n  if(cmsSignedSimp === null)\n    return null;\n\n  if(!('unsignedAttrs' in cmsSignedSimp.signerInfos[0]))\n    return null;\n\n  let tsattr = null;\n\n  cmsSignedSimp.signerInfos[0].unsignedAttrs.attributes.forEach(attr => {\n    if(attr.type === '1.2.840.113549.1.9.16.2.14')\n      tsattr = attr;\n  });\n\n  if(tsattr === null)\n    return null;\n\n  let tstoken = null;\n\n  try {\n    let asn1 = asn1js.fromBER(tsattr.values[0].valueBeforeDecode);\n    tstoken = new pkijs.ContentInfo({schema: asn1.result});\n  } catch(ex) {\n  }\n\n  return tstoken;\n}\n\n/**\n * Verify the hash of a some CMS signed data.\n * @param {pkijs.SignedData} cmsSignedSimp - The CMS Signed Data structure\n * @param {ArrayBuffer} signedDataBuffer - The signed data.\n * @return {Promise<boolean>} A promise that resolves to true if the hash is\n * correct, otherwise false.\n */\nfunction verifyCMSHash(cmsSignedSimp, signedDataBuffer) {\n  if((cmsSignedSimp === null) || (signedDataBuffer === null))\n    return Promise.resolve(false);\n\n  const hashAlgo = pkijs.getAlgorithmByOID(\n    cmsSignedSimp.signerInfos[0].digestAlgorithm.algorithmId);\n  if(!('name' in hashAlgo))\n    return Promise.resolve(false);\n\n  return Promise.resolve().then(() => {\n    const crypto = pkijs.getCrypto();\n\n    return crypto.digest({ name: hashAlgo.name },\n      new Uint8Array(signedDataBuffer));\n  }).then(result => {\n    let messageDigest = new ArrayBuffer(0);\n    const signedAttrs = cmsSignedSimp.signerInfos[0].signedAttrs;\n\n    // Find messageDigest attribute\n    for(let j = 0; j < signedAttrs.attributes.length; j++) {\n      if(signedAttrs.attributes[j].type === '1.2.840.113549.1.9.4') {\n        messageDigest = signedAttrs.attributes[j].values[0].valueBlock.valueHex;\n        break;\n      }\n    }\n\n    if(messageDigest.byteLength === 0)\n      return false;\n\n    const view1 = new Uint8Array(messageDigest);\n    const view2 = new Uint8Array(result);\n\n    if(view1.length !== view2.length)\n      return false;\n\n    for(let i = 0; i < view1.length; i++) {\n      if(view1[i] !== view2[i])\n        return false;\n    }\n\n    return true;\n  }, result => {\n    return false;\n  });\n}\n\n/**\n * Verify if a certificate chains to some trusted CAs.\n * @param {pkijs.Certificate} certificate - The certificate that will be\n * checked.\n * @param {Array<pkijs.Certificate>} chain - Additional certificates in the\n * chain.\n * @param {Array<pkijs.Certificate>} trustedCAs - The trusted CAs\n * @return {Promise<boolean>} A promise that is resolved with a boolean value\n * stating if the certificate was verified or not.\n */\nfunction verifyChain(certificate, chain, trustedCAs) {\n  if(certificate === null)\n    return Promise.resolve(false);\n\n  return Promise.resolve().then(() => {\n    const certificateChainEngine = new pkijs.CertificateChainValidationEngine({\n      certs: chain,\n      trustedCerts: trustedCAs.filter(cert => typeof cert !== 'undefined')\n    });\n    certificateChainEngine.certs.push(certificate);\n\n    return certificateChainEngine.verify();\n  }).then(result => {\n    return result.result;\n  }, result => {\n    return false;\n  });\n}\n\n/**\n * Document information definition\n */\nexport class PDFInfo {\n  /**\n   * Generate an empty PDFInfo object.\n   * @constructor\n   */\n  constructor() {\n    /**\n     * @type {boolean}\n     * @description A valid PDF file.\n     */\n    this.isValid = false;\n    /**\n     * @type {boolean}\n     * @description A signed PDF file.\n     */\n    this.isSigned = false;\n    /**\n     * @type {boolean}\n     * @description Signed hash has been verified.\n     */\n    this.sigVerified = false;\n    /**\n     * @type {boolean}\n     * @description The hash corresponds to the signed data.\n     */\n    this.hashVerified = false;\n    /**\n     * @type {string}\n     * @description The algorithm that was used to hash the data.\n     */\n    this.hashAlgorithm = '';\n    /**\n     * @type {Array<TrustStoreStatus>}\n     * @description Signer certificate chains to a trusted signing CA.\n     */\n    this.signerVerified = [];\n    /**\n     * @type {boolean}\n     * @description A timestamped PDF file.\n     */\n    this.hasTS = false;\n    /**\n     * @type {boolean}\n     * @description The timestamp has been verified.\n     */\n    this.tsVerified = false;\n    /**\n     * @type {Array<TrustStoreStatus>}\n     * @description The certificate of the timestamp chains to a trusted\n     * timestamping CA.\n     */\n    this.tsCertVerified = [];\n    /**\n     * @type {pkijs.Certificate}\n     * @description The signer's certificate.\n     */\n    this.cert = null;\n    /**\n     * @type {pkijs.Certificate}\n     * @description The timestamp authority's certificate.\n     */\n    this.tsCert = null;\n  }\n\n  /**\n   * Check if the file verified was a valid signed PDF whose signature and\n   * signed hash have been verified.\n   */\n  get isValidSigned() {\n    return this.isValid & this.isSigned & this.sigVerified & this.hashVerified;\n  }\n\n  /**\n   * Check if the file verified was a valid signed and timestamped PDF whose\n   * signature, signed hash and timestamp have been verified.\n   */\n  get isValidSignedTimestamped() {\n    return this.isValid & this.isSigned & this.sigVerified &\n      this.hashVerified & this.hasTS & this.tsVerified;\n  }\n\n  /**\n   * Check if the signer has been verified against a truststore. If the file is\n   * timestamped, then the timestamp signer will also be checked against another\n   * truststore.\n   * @param {string} signingTruststore - The name of the signing truststore.\n   * @param {string} timestampingTruststore - The name of the timestamping\n   * truststore.\n   * @return {boolean} True if the file was verified against both truststores,\n   * false otherwise.\n   */\n  isSignersVerified(signingTruststore, timestampingTruststore) {\n    if(!this.isValid || !this.isSigned)\n      return false;\n\n    let verified = false;\n    this.signerVerified.forEach(signer => {\n      if(signer.name === signingTruststore)\n        verified = signer.status;\n    });\n    if(verified === false)\n      return false;\n\n    if(this.hasTS) {\n      verified = false;\n      this.tsCertVerified.forEach(signer => {\n        if(signer.name === timestampingTruststore)\n          verified = signer.status;\n      });\n      if(verified === false)\n        return false;\n    }\n\n    return true;\n  }\n};\n\n/**\n * PDF Validator class\n */\nexport class PDFValidator {\n  /**\n   * Load a PDF file from a buffer.\n   * @param {ArrayBuffer} buffer - The buffer containing the PDF file.\n   */\n  constructor(buffer) {\n    /**\n     * @type {Array<TrustStore>}\n     * @description Trusted document signing CAs.\n     */\n    this.trustedSigningCAs = [];\n    /**\n     * @type {Array<TrustStore>}\n     * @description Trusted document timestamping CAs.\n     */\n    this.trustedTimestampingCAs = [];\n    /**\n     * @type {pkijs.SignedData}\n     * @description The SignedData structure of the PDF signature.\n     */\n    this.cmsSignedSimp = null;\n    /**\n     * @type {ArrayBuffer}\n     * @description An ArrayBuffer holding the signed data.\n     */\n    this.signedDataBuffer = null;\n    /**\n     * @type {PDFInfo}\n     * @description A PDFInfo object holding the validation results.\n     */\n    this.pdfInfo = new PDFInfo();\n\n    const bufferView = new Uint8Array(buffer);\n\n    const pdf = new pdfjs.PDFJS.PDFDocument(null, bufferView, null);\n\n    try {\n      pdf.parseStartXRef();\n      pdf.parse();\n    } catch(ex) {\n      return;\n    }\n\n    this.pdfInfo.isValid = true;\n\n    const acroForm = pdf.xref.root.get('AcroForm');\n    if(typeof acroForm === 'undefined')\n      return;\n\n    const fields = acroForm.get('Fields');\n    if(pdfjs.PDFJS.isRef(fields[0]) === false)\n      return;\n\n    const sigField = pdf.xref.fetch(fields[0]);\n    const sigFieldType = sigField.get('FT');\n    if((typeof sigFieldType === 'undefined') || (sigFieldType.name !== 'Sig'))\n      return;\n\n    const v = sigField.get('V');\n    const byteRange = v.get('ByteRange');\n    const contents = v.get('Contents');\n\n    const contentLength = contents.length;\n    const contentBuffer = new ArrayBuffer(contentLength);\n    const contentView = new Uint8Array(contentBuffer);\n\n    for(let i = 0; i < contentLength; i++)\n      contentView[i] = contents.charCodeAt(i);\n\n    const asn1 = asn1js.fromBER(contentBuffer);\n\n    const cmsContentSimp = new pkijs.ContentInfo({ schema: asn1.result });\n    this.cmsSignedSimp = new pkijs.SignedData({\n      schema: cmsContentSimp.content\n    });\n\n    this.signedDataBuffer = new ArrayBuffer(byteRange[1] + byteRange[3]);\n    const signedDataView = new Uint8Array(this.signedDataBuffer);\n\n    let count = 0;\n    for(let i = byteRange[0]; i < (byteRange[0] + byteRange[1]); i++, count++)\n      signedDataView[count] = bufferView[i];\n\n    for(let j = byteRange[2]; j < (byteRange[2] + byteRange[3]); j++, count++)\n      signedDataView[count] = bufferView[j];\n\n    this.pdfInfo.isSigned = true;\n  }\n\n  /**\n   * Add a trust store to the document signing trust stores.\n   * @param {TrustStore} truststore - The trust store to add.\n   */\n  addSigningTruststore(truststore) {\n    this.trustedSigningCAs.push(truststore);\n  }\n\n  /**\n   * Remove a trust store from the document signing trust stores by name.\n   * @param {string} name - The name of the trust store to remove.\n   */\n  removeSigningTruststore(name) {\n    let idx;\n\n    for(idx = 0; idx < this.trustedSigningCAs.length; idx++) {\n      if(this.trustedSigningCAs[idx].name === name) {\n        this.trustedSigningCAs.splice(idx, 1);\n        idx--;\n      }\n    }\n  }\n\n  /**\n   * Add a trust store to the timestamping trust stores.\n   * @param {TrustStore} truststore - The trust store to add.\n   */\n  addTimestampingTruststore(truststore) {\n    this.trustedTimestampingCAs.push(truststore);\n  }\n\n  /**\n   * Remove a trust store from the document signing trust stores by name.\n   * @param {string} name - The name of the trust store to remove.\n   */\n  removeTimestampingTruststore(name) {\n    let idx;\n\n    for(idx = 0; idx < this.trustedTimestampingCAs.length; idx++) {\n      if(this.trustedTimestampingCAs[idx].name === name) {\n        this.trustedTimestampingCAs.splice(idx, 1);\n        idx--;\n      }\n    }\n  }\n\n  /**\n   * Validate the PDF file.\n   * @return {Promise<PDFInfo>} A promise that is resolved with a PDFInfo\n   * object containing the validation results.\n   */\n  validate() {\n    let sequence = Promise.resolve();\n\n    if((this.pdfInfo.isValid === false) || (this.pdfInfo.isSigned === false))\n      return sequence.then(() => { return this.pdfInfo; });\n\n    sequence = sequence.then(() => this.cmsSignedSimp.verify({\n      signer: 0,\n      data: this.signedDataBuffer,\n      checkChain: false,\n      extendedMode: true\n    })).then(result => {\n      this.pdfInfo.sigVerified = result.signatureVerified;\n      this.pdfInfo.cert = result.signerCertificate;\n    }, result => {\n      this.pdfInfo.sigVerified = false;\n      this.pdfInfo.cert = result.signerCertificate;\n    });\n\n    this.trustedSigningCAs.forEach(truststore => {\n      sequence = sequence.then(() => verifyChain(this.pdfInfo.cert,\n        this.cmsSignedSimp.certificates, truststore.certificates)\n      ).then(result => {\n        this.pdfInfo.signerVerified.push({\n          name: truststore.name,\n          status: result\n        });\n      });\n    });\n\n    if('signedAttrs' in this.cmsSignedSimp.signerInfos[0]) {\n      const hashAlgo = pkijs.getAlgorithmByOID(\n        this.cmsSignedSimp.signerInfos[0].digestAlgorithm.algorithmId);\n      if('name' in hashAlgo)\n        this.pdfInfo.hashAlgorithm = hashAlgo.name;\n\n      sequence = sequence.then(() => {\n        return verifyCMSHash(this.cmsSignedSimp, this.signedDataBuffer);\n      }).then((result) => {\n        this.pdfInfo.hashVerified = result;\n      });\n\n      if('unsignedAttrs' in this.cmsSignedSimp.signerInfos[0]) {\n        const tsToken = extractTSToken(this.cmsSignedSimp);\n\n        if(tsToken != null) {\n          this.pdfInfo.hasTS = true;\n\n          const tsSigned = new pkijs.SignedData({ schema: tsToken.content });\n\n          sequence = sequence.then(() => tsSigned.verify({\n            signer: 0,\n            data: this.cmsSignedSimp.signerInfos[0].signature.valueBlock\n              .valueHex,\n            checkChain: false,\n            extendedMode: true\n          })).then(result => {\n            this.pdfInfo.tsVerified = result.signatureVerified;\n            this.pdfInfo.tsCert = result.signerCertificate;\n          }, result => {\n            this.pdfInfo.tsVerified = false;\n            this.pdfInfo.tsCert = result.signerCertificate;\n          });\n\n          this.trustedTimestampingCAs.forEach(truststore => {\n            sequence = sequence.then(() => verifyChain(this.pdfInfo.tsCert,\n              tsSigned.certificates, truststore.certificates)\n            ).then(result => {\n              this.pdfInfo.tsCertVerified.push({\n                name: truststore.name,\n                status: result\n              });\n            });\n          });\n        }\n      }\n    }\n\n    return sequence.then(() => this.pdfInfo);\n  }\n}\n"]}