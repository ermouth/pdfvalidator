{"version":3,"sources":["../src/index.js"],"names":["pkijs","asn1js","pdfjs","eslutils","PDFJS","window","getSignatures","pdf","acroForm","xref","root","get","sigs","fields","forEach","isRef","field","sigField","fetch","sigFieldType","name","v","byteRange","contents","contentLength","length","contentBuffer","ArrayBuffer","contentView","Uint8Array","i","charCodeAt","asn1","fromBER","cmsContentSimp","ContentInfo","schema","result","cmsSignedSimp","SignedData","content","push","ranges","start","end","extractTSToken","signerInfos","tsattr","unsignedAttrs","attributes","attr","type","tstoken","values","valueBeforeDecode","ex","verifyCMSHash","signedDataBuffer","Promise","resolve","hashAlgo","getAlgorithmByOID","digestAlgorithm","algorithmId","then","crypto","getCrypto","digest","messageDigest","signedAttrs","j","valueBlock","valueHex","byteLength","view1","view2","validateSignature","signature","trustedSigningCAs","trustedTimestampingCAs","id","sequence","sigInfo","SignatureInfo","signedDataLen","range","signedData","signedDataView","contentsView","count","verify","signer","data","checkChain","extendedMode","sigVerified","signatureVerified","cert","signerCertificate","certificates","rawCert","toSchema","toBER","certBundle","Certificate","verifyChain","truststore","signerVerified","status","hashAlgorithm","hashVerified","tsToken","hasTS","tsSigned","tsVerified","tsCert","tsCertBundle","tsCertVerified","PDFValidator","buffer","TrustStoreList","validationInfo","ValidationInfo","pdfSignatures","bufferView","PDFDocument","parseStartXRef","parse","isValid","e","isSigned","addTrustStore","removeTrustStore","signatures"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * PDF Validator module\n *\n * By Fotis Loukos <me@fotisl.com>\n * @module pdfvalidator\n */\nimport * as pkijs from 'pkijs';\nimport * as asn1js from 'asn1js';\nimport * as pdfjs from './pdf.js';\nimport * as eslutils from 'eslutils';\nimport './webcrypto';\n\n/**\n * A range in the file.\n * @typedef {Object} Range\n * @property {number} start - The start of the range.\n * @property {number} end - The end of the range.\n */\n\n/**\n * A PDF signature.\n * @typedef {Object} PDFSignature\n * @property {pkijs.SignedData} cmsSignedSimp - A SignedData structure\n * containing the signature\n * @property {Array<Range>} ranges - An array of all ranges signed by this\n * signature.\n */\n\nlet PDFJS;\nif(typeof window === 'undefined')\n  PDFJS = pdfjs.PDFJS;\nelse\n  PDFJS = window.PDFJS;\n\n/**\n * Get all signatures from a PDFDocument.\n * @param {pdfjs.PDFJS.PDFDocument} pdf - The PDF document\n * @return {Array<PDFSignature>} An array of PDFSignature objects describing\n * all signatures found.\n */\nfunction getSignatures(pdf) {\n  const acroForm = pdf.xref.root.get('AcroForm');\n  if(typeof acroForm === 'undefined')\n    return [];\n\n  const sigs = [];\n  const fields = acroForm.get('Fields');\n  fields.forEach(field => {\n    if(PDFJS.isRef(field) === false)\n      return;\n\n    const sigField = pdf.xref.fetch(field);\n    const sigFieldType = sigField.get('FT');\n    if((typeof sigFieldType === 'undefined') || (sigFieldType.name !== 'Sig'))\n      return;\n\n    const v = sigField.get('V');\n    const byteRange = v.get('ByteRange');\n    const contents = v.get('Contents');\n\n    const contentLength = contents.length;\n    const contentBuffer = new ArrayBuffer(contentLength);\n    const contentView = new Uint8Array(contentBuffer);\n\n    for(let i = 0; i < contentLength; i++)\n      contentView[i] = contents.charCodeAt(i);\n\n    const asn1 = asn1js.fromBER(contentBuffer);\n\n    const cmsContentSimp = new pkijs.ContentInfo({ schema: asn1.result });\n    const cmsSignedSimp = new pkijs.SignedData({\n      schema: cmsContentSimp.content\n    });\n\n    sigs.push({\n      cmsSignedSimp,\n      ranges: [\n        {\n          start: byteRange[0],\n          end: byteRange[0] + byteRange[1]\n        },\n        {\n          start: byteRange[2],\n          end: byteRange[2] + byteRange[3]\n        }\n      ]\n    });\n  });\n\n  return sigs;\n}\n\n/**\n * Extract the timestamp token from the unsigned attributes of the CMS\n * signed data.\n * @param {pkijs.SignedData} cmsSignedSimp - The CMS signed data.\n * @return {pkijs.ContentInfo} The timestamp token as a pkijs.ContentInfo\n * object or null if no timestamp is present.\n */\nfunction extractTSToken(cmsSignedSimp) {\n  if(cmsSignedSimp === null)\n    return null;\n\n  if(!('unsignedAttrs' in cmsSignedSimp.signerInfos[0]))\n    return null;\n\n  let tsattr = null;\n\n  cmsSignedSimp.signerInfos[0].unsignedAttrs.attributes.forEach(attr => {\n    if(attr.type === '1.2.840.113549.1.9.16.2.14')\n      tsattr = attr;\n  });\n\n  if(tsattr === null)\n    return null;\n\n  let tstoken = null;\n\n  try {\n    let asn1 = asn1js.fromBER(tsattr.values[0].valueBeforeDecode);\n    tstoken = new pkijs.ContentInfo({schema: asn1.result});\n  } catch(ex) {\n  }\n\n  return tstoken;\n}\n\n/**\n * Verify the hash of a some CMS signed data.\n * @param {pkijs.SignedData} cmsSignedSimp - The CMS Signed Data structure\n * @param {ArrayBuffer} signedDataBuffer - The signed data.\n * @return {Promise<boolean>} A promise that resolves to true if the hash is\n * correct, otherwise false.\n */\nfunction verifyCMSHash(cmsSignedSimp, signedDataBuffer) {\n  if((cmsSignedSimp === null) || (signedDataBuffer === null))\n    return Promise.resolve(false);\n\n  const hashAlgo = pkijs.getAlgorithmByOID(\n    cmsSignedSimp.signerInfos[0].digestAlgorithm.algorithmId);\n  if(!('name' in hashAlgo))\n    return Promise.resolve(false);\n\n  return Promise.resolve().then(() => {\n    const crypto = pkijs.getCrypto();\n\n    return crypto.digest({ name: hashAlgo.name },\n      new Uint8Array(signedDataBuffer));\n  }).then(result => {\n    let messageDigest = new ArrayBuffer(0);\n    const signedAttrs = cmsSignedSimp.signerInfos[0].signedAttrs;\n\n    // Find messageDigest attribute\n    for(let j = 0; j < signedAttrs.attributes.length; j++) {\n      if(signedAttrs.attributes[j].type === '1.2.840.113549.1.9.4') {\n        messageDigest = signedAttrs.attributes[j].values[0].valueBlock.valueHex;\n        break;\n      }\n    }\n\n    if(messageDigest.byteLength === 0)\n      return false;\n\n    const view1 = new Uint8Array(messageDigest);\n    const view2 = new Uint8Array(result);\n\n    if(view1.length !== view2.length)\n      return false;\n\n    for(let i = 0; i < view1.length; i++) {\n      if(view1[i] !== view2[i])\n        return false;\n    }\n\n    return true;\n  }, result => {\n    return false;\n  });\n}\n\n/**\n * Validate a single signature.\n * @param {PDFSignature} signature - The PDF signature.\n * @param {ArrayBuffer} contents - The contents of the file.\n * @param {eslutils.TrustStoreList} trustedSigningCAs - Trusted document\n * signing CAs.\n * @param {eslutils.TrustStoreList} trustedTimestampingCAs - Trusted document\n * timestamping CAs.\n * @param {number} id - The id of the signature.\n * @return {Promise<eslutils.SignatureInfo>} A promise that is resolved with\n * a SignatureInfo object containing information about the signature.\n */\nfunction validateSignature(signature, contents, trustedSigningCAs,\n  trustedTimestampingCAs, id) {\n  let sequence = Promise.resolve();\n  const sigInfo = new eslutils.SignatureInfo(id);\n\n  let signedDataLen = 0;\n  signature.ranges.forEach(range => {\n    signedDataLen += (range.end - range.start);\n  });\n  const signedData = new ArrayBuffer(signedDataLen);\n  const signedDataView = new Uint8Array(signedData);\n  const contentsView = new Uint8Array(contents);\n\n  let count = 0;\n  signature.ranges.forEach(range => {\n    for(let i = range.start; i < range.end; i++, count++)\n      signedDataView[count] = contentsView[i];\n  });\n\n  sequence = sequence.then(() => signature.cmsSignedSimp.verify({\n    signer: 0,\n    data: signedData,\n    checkChain: false,\n    extendedMode: true\n  })).then(result => {\n    sigInfo.sigVerified = result.signatureVerified;\n    sigInfo.cert = result.signerCertificate;\n  }, result => {\n    sigInfo.sigVerified = false;\n    sigInfo.cert = result.signerCertificate;\n  });\n\n  sequence = sequence.then(() => {\n    signature.cmsSignedSimp.certificates.forEach(cert => {\n      const rawCert = cert.toSchema().toBER(false);\n      const asn1 = asn1js.fromBER(rawCert);\n      sigInfo.certBundle.push(new pkijs.Certificate({ schema: asn1.result }));\n    });\n  });\n\n  trustedSigningCAs.forEach(truststore => {\n    sequence = sequence.then(() => eslutils.verifyChain(sigInfo.cert,\n      signature.cmsSignedSimp.certificates, truststore.certificates)\n    ).then(result => {\n      sigInfo.signerVerified.push({\n        name: truststore.name,\n        status: result\n      });\n    });\n  });\n\n  const hashAlgo = pkijs.getAlgorithmByOID(\n    signature.cmsSignedSimp.signerInfos[0].digestAlgorithm.algorithmId);\n  if('name' in hashAlgo)\n    sigInfo.hashAlgorithm = hashAlgo.name;\n\n  if('signedAttrs' in signature.cmsSignedSimp.signerInfos[0]) {\n    sequence = sequence.then(() => {\n      return verifyCMSHash(signature.cmsSignedSimp, signedData);\n    }).then((result) => {\n      sigInfo.hashVerified = result;\n    });\n\n    if('unsignedAttrs' in signature.cmsSignedSimp.signerInfos[0]) {\n      const tsToken = extractTSToken(signature.cmsSignedSimp);\n\n      if(tsToken != null) {\n        sigInfo.hasTS = true;\n\n        const tsSigned = new pkijs.SignedData({ schema: tsToken.content });\n\n        sequence = sequence.then(() => tsSigned.verify({\n          signer: 0,\n          data: signature.cmsSignedSimp.signerInfos[0].signature.valueBlock\n            .valueHex,\n          checkChain: false,\n          extendedMode: true\n        })).then(result => {\n          sigInfo.tsVerified = result.signatureVerified;\n          sigInfo.tsCert = result.signerCertificate;\n        }, result => {\n          sigInfo.tsVerified = false;\n          sigInfo.tsCert = result.signerCertificate;\n        });\n\n        sequence = sequence.then(() => {\n          tsSigned.certificates.forEach(cert => {\n            const rawCert = cert.toSchema().toBER(false);\n            const asn1 = asn1js.fromBER(rawCert);\n            sigInfo.tsCertBundle.push(new pkijs.Certificate({ schema: asn1.result }));\n          });\n        });\n\n        trustedTimestampingCAs.forEach(truststore => {\n          sequence = sequence.then(() => eslutils.verifyChain(sigInfo.tsCert,\n            tsSigned.certificates, truststore.certificates)\n          ).then(result => {\n            sigInfo.tsCertVerified.push({\n              name: truststore.name,\n              status: result\n            });\n          });\n        });\n      }\n    }\n  } else {\n    /*\n     * If there are no signed attributes, and the hash is computed just from\n     * the original document, then we assume the signer calculated the correct\n     * hash if the signature is correct.\n     */\n    sequence = sequence.then(() => {\n      sigInfo.hashVerified = sigInfo.sigVerified;\n    });\n  }\n\n  return sequence.then(() => sigInfo);\n}\n\n/**\n * PDF Validator class\n */\nexport class PDFValidator {\n  /**\n   * Load a PDF file from a buffer.\n   * @param {ArrayBuffer} buffer - The buffer containing the PDF file.\n   */\n  constructor(buffer) {\n    /**\n     * @type {eslutils.TrustStoreList}\n     * @description Trusted document signing CAs.\n     */\n    this.trustedSigningCAs = new eslutils.TrustStoreList();\n    /**\n     * @type {eslutils.TrustStoreList}\n     * @description Trusted document timestamping CAs.\n     */\n    this.trustedTimestampingCAs = new eslutils.TrustStoreList();\n    /**\n     * @type {eslutils.ValidationInfo}\n     * @description A ValidationInfo object holding the validation results.\n     */\n    this.validationInfo = new eslutils.ValidationInfo();\n    /**\n     * @type {ArrayBuffer}\n     * @description The contents of the file.\n     */\n    this.buffer = buffer;\n    /**\n     * @type {Array<PDFSignature>}\n     * @description The signatures in the file.\n     */\n    this.pdfSignatures = null;\n\n    const bufferView = new Uint8Array(buffer);\n\n    const pdf = new PDFJS.PDFDocument(null, bufferView, null);\n\n    try {\n      pdf.parseStartXRef();\n      pdf.parse();\n    } catch(ex) {\n      return;\n    }\n\n    this.validationInfo.isValid = true;\n\n    try {\n      this.pdfSignatures = getSignatures(pdf);\n    } catch(e) {\n      this.pdfSignatures = [];\n    }\n\n    if(this.pdfSignatures.length > 0)\n      this.validationInfo.isSigned = true;\n  }\n\n  /**\n   * Add a trust store to the document signing trust stores.\n   * @param {TrustStore} truststore - The trust store to add.\n   */\n  addSigningTruststore(truststore) {\n    this.trustedSigningCAs.addTrustStore(truststore);\n  }\n\n  /**\n   * Remove a trust store from the document signing trust stores by name.\n   * @param {string} name - The name of the trust store to remove.\n   */\n  removeSigningTruststore(name) {\n    this.trustedSigningCAs.removeTrustStore(name);\n  }\n\n  /**\n   * Add a trust store to the timestamping trust stores.\n   * @param {TrustStore} truststore - The trust store to add.\n   */\n  addTimestampingTruststore(truststore) {\n    this.trustedTimestampingCAs.addTrustStore(truststore);\n  }\n\n  /**\n   * Remove a trust store from the document signing trust stores by name.\n   * @param {string} name - The name of the trust store to remove.\n   */\n  removeTimestampingTruststore(name) {\n    this.trustedTimestampingCAs.removeTrustStore(name);\n  }\n\n  /**\n   * Validate the PDF file.\n   * @return {Promise<PDFInfo>} A promise that is resolved with a PDFInfo\n   * object containing the validation results.\n   */\n  validate() {\n    let sequence = Promise.resolve();\n\n    if((this.validationInfo.isValid === false) ||\n      (this.validationInfo.isSigned === false))\n      return sequence.then(() => { return this.validationInfo; });\n\n    for(let i = 0; i < this.pdfSignatures.length; i++) {\n      sequence = sequence.then(() => validateSignature(this.pdfSignatures[i],\n        this.buffer, this.trustedSigningCAs, this.trustedTimestampingCAs, i))\n        .then(result => {\n          this.validationInfo.signatures.push(result);\n        });\n    }\n\n    return sequence.then(() => this.validationInfo);\n  }\n}\n"]}